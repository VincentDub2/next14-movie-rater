// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteMovies Movie[]

  accounts Account[]
  rating   Rating[]
  sessions Session[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageSrc    String
  director    String
  actors      String[]
  realease    DateTime
  trailer     String

  createdAt DateTime @default(now())
  category  String

  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Rating Rating[]
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  movieId String @db.ObjectId
  userId  String @db.ObjectId
  movie   Movie  @relation(fields: [movieId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}
